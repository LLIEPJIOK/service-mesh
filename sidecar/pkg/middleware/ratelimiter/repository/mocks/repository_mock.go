// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// AddRecord provides a mock function with given fields: ctx, key, tm
func (_m *MockRepository) AddRecord(ctx context.Context, key string, tm time.Time) error {
	ret := _m.Called(ctx, key, tm)

	if len(ret) == 0 {
		panic("no return value specified for AddRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, key, tm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_AddRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecord'
type MockRepository_AddRecord_Call struct {
	*mock.Call
}

// AddRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - tm time.Time
func (_e *MockRepository_Expecter) AddRecord(ctx interface{}, key interface{}, tm interface{}) *MockRepository_AddRecord_Call {
	return &MockRepository_AddRecord_Call{Call: _e.mock.On("AddRecord", ctx, key, tm)}
}

func (_c *MockRepository_AddRecord_Call) Run(run func(ctx context.Context, key string, tm time.Time)) *MockRepository_AddRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockRepository_AddRecord_Call) Return(_a0 error) *MockRepository_AddRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_AddRecord_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *MockRepository_AddRecord_Call {
	_c.Call.Return(run)
	return _c
}

// CountRecords provides a mock function with given fields: ctx, key
func (_m *MockRepository) CountRecords(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for CountRecords")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CountRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRecords'
type MockRepository_CountRecords_Call struct {
	*mock.Call
}

// CountRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRepository_Expecter) CountRecords(ctx interface{}, key interface{}) *MockRepository_CountRecords_Call {
	return &MockRepository_CountRecords_Call{Call: _e.mock.On("CountRecords", ctx, key)}
}

func (_c *MockRepository_CountRecords_Call) Run(run func(ctx context.Context, key string)) *MockRepository_CountRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_CountRecords_Call) Return(_a0 int64, _a1 error) *MockRepository_CountRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CountRecords_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockRepository_CountRecords_Call {
	_c.Call.Return(run)
	return _c
}

// ExpireKey provides a mock function with given fields: ctx, key, ttl
func (_m *MockRepository) ExpireKey(ctx context.Context, key string, ttl time.Duration) error {
	ret := _m.Called(ctx, key, ttl)

	if len(ret) == 0 {
		panic("no return value specified for ExpireKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, key, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_ExpireKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpireKey'
type MockRepository_ExpireKey_Call struct {
	*mock.Call
}

// ExpireKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - ttl time.Duration
func (_e *MockRepository_Expecter) ExpireKey(ctx interface{}, key interface{}, ttl interface{}) *MockRepository_ExpireKey_Call {
	return &MockRepository_ExpireKey_Call{Call: _e.mock.On("ExpireKey", ctx, key, ttl)}
}

func (_c *MockRepository_ExpireKey_Call) Run(run func(ctx context.Context, key string, ttl time.Duration)) *MockRepository_ExpireKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockRepository_ExpireKey_Call) Return(_a0 error) *MockRepository_ExpireKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_ExpireKey_Call) RunAndReturn(run func(context.Context, string, time.Duration) error) *MockRepository_ExpireKey_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOldRecords provides a mock function with given fields: ctx, key, from, to
func (_m *MockRepository) RemoveOldRecords(ctx context.Context, key string, from time.Time, to time.Time) error {
	ret := _m.Called(ctx, key, from, to)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOldRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) error); ok {
		r0 = rf(ctx, key, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_RemoveOldRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOldRecords'
type MockRepository_RemoveOldRecords_Call struct {
	*mock.Call
}

// RemoveOldRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - from time.Time
//   - to time.Time
func (_e *MockRepository_Expecter) RemoveOldRecords(ctx interface{}, key interface{}, from interface{}, to interface{}) *MockRepository_RemoveOldRecords_Call {
	return &MockRepository_RemoveOldRecords_Call{Call: _e.mock.On("RemoveOldRecords", ctx, key, from, to)}
}

func (_c *MockRepository_RemoveOldRecords_Call) Run(run func(ctx context.Context, key string, from time.Time, to time.Time)) *MockRepository_RemoveOldRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockRepository_RemoveOldRecords_Call) Return(_a0 error) *MockRepository_RemoveOldRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_RemoveOldRecords_Call) RunAndReturn(run func(context.Context, string, time.Time, time.Time) error) *MockRepository_RemoveOldRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
